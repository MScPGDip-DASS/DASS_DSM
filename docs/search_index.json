[["index.html", "Data Cleaning and Visualisation using R About", " Data Cleaning and Visualisation using R Dr. Ioana Macoveciuc About WORK IN PROGRESS Welcome to SOST70023 Data Cleaning and Visualisation using R! This notebook will host the materials for all practical exercises and tasks for this course unit. "],["how-to-use-this-notebook.html", "How to use this notebook", " How to use this notebook WORK IN PROGRESS Describe how to use each week and how to use the menu (maybe add a picture?) Mention that each link will open in a new window. 1: Before beginning, it is recommended that you create a RStudio project for this course and work through the exercises and tasks in each section using this project. 2: You should write and save your answers to the exercises and tasks in R scripts. You should have at least one R script for each course unit section. 3: To adequately develop your practical programming skills, it is absolutely essential that you first attempt all exercises and tasks in each section on your own before comparing your answers with those provided in this notebook. Type out the code, run it in the console, and save all the code in an R script. "],["overview.html", "Overview", " Overview Section 1: Introducing Statistical Programming with R and RStudio Learning Outcomes: Employ the basics of the R language to run simple lines of code; Import different types of data files; Export data in different formats. In this section, you will be introduced to the following functions: Function Description Package c() concatenate function base R class() class of object base R length() length of object base R View() viewing data objects spreadsheet-style base R read_spss() reading SPSS data files haven read_dta() reading Stata data files haven read.csv() reading .csv files base R readRDS() reading .RDS files base R load() loading .RData files base R save() saving multiple files (.Rdata format) base R saveRDS() saving single files (.RDS format) base R write.csv() save a file as .csv file base R Remember to continue working in the RStudio project you created for this course and typing your answers in separate R scripts. "],["basics-of-vector-structures.html", "1. Basics of Vector Structures 1.1 Exercise 1.2 Exercise 1.3 Exercise 1.4 Exercise 1.5 Exercise 1.6 Exercise 1.7 Exercise", " 1. Basics of Vector Structures 1.1 Exercise Create a vector object called num_vct that contains the following values: 70, 8, 50, 100. Print the contents. Code # Creating the vector. num_vct &lt;- c(70, 8, 50, 100) # Now printing the contents. num_vct ## [1] 70 8 50 100 1.2 Exercise Perform the following tasks with num_vct: Multiply the vector by 2. Divide the vector by 10. Subtract 5 from the vector. Add 8 to the vector. Code num_vct * 2 num_vct / 10 num_vct - 5 num_vct + 8 When performing operations on single vectors, you will note in the output that the operation is applied to each individual element within the vector. 1.3 Exercise Create a new numeric vector that contains the following values: 5, 7, 9, 10. Name it num_vct2 and print the contents. Code # Creating the vector. num_vct2 &lt;- c(5, 7, 9, 10) #Now printing the contents. num_vct2 ## [1] 5 7 9 10 1.4 Exercise Perform the following tasks with num_vct and num_vct2: Add num_vct2 to num_vct. Divide num_vct by num_vct2. Multiply num_vct by num_vct2. Subtract num_vct from num_vct2. Code num_vct2 + num_vct num_vct / num_vct2 num_vct * num_vct2 num_vct2 - num_vct When performing operations with two vectors, you will note in the output that the operation is being applied to the element of each vector in sequential order, according to the index of each element. Let’s take the following operation as an example: num_vct2 - num_vct. The elements of num_vct are: 70, 8, 50, 100 The elements of num_vct2 are: 5, 7, 9, 10 When subtracting num_vct from num_vct2, R performs the following operations according to the ‘position’ of each element in the vector. At index [1], we have 70 for num_vct and 5 for num_vct2 At index [2], we have 8 for num_vct and 7 for num_vct2 At index [3], we have 50 for num_vct and 9 for num_vct2 At index [4], we have 100 for num_vct and 10 for num_vct2 Therefore, R will perform the subtraction operation for each element located at a given index. The output for this operation will be: [1] -65 -1 -41 -90. 1.5 Exercise Create a character vector object that contains the following: I, love, programming, with, R. Name this vector char_vct and print the contents. Code char_vct &lt;- c(&quot;I&quot;, &quot;love&quot;, &quot;programming&quot;, &quot;with&quot;, &quot;R&quot;) char_vct ## [1] &quot;I&quot; &quot;love&quot; &quot;programming&quot; &quot;with&quot; &quot;R&quot; 1.6 Exercise Perform calculations on char_vct. Code char_vct * 2 ## Error in char_vct * 2: non-numeric argument to binary operator What results do you obtain after trying to perform mathematical operations on your character vector? Why ? Let’s say we try to multiply the character vector by 2. Note the error message in the console; none of the tasks can be applied to this vector because these are all arithmetic tasks which work only on numeric vectors. 1.7 Exercise Create a vector object that contains the following logical and numeric values: TRUE, 6, FALSE, 10, FALSE. Name it new_vct and print the contents. Code new_vct &lt;- c(TRUE, 6, FALSE, 10, FALSE) new_vct ## [1] 1 6 0 10 0 Does the output match the contents you entered when you created the vector? Why? No, it does not. Since vectors cannot contain different data types, R will force (i.e. coerce) all entered values to match, in an attempt to lose as little information as possible. In this case, the logical values are coerced to 1 and 0, corresponding to True and False respectively. This is one of the several reasons for why data cleaning is important before proceeding with data analysis; such coercion can have a significant impact on the accuracy of our data and implicitly, on your interpretation of the data. "],["importing-and-exporting-data.html", "2. Importing and Exporting Data 2.1 Exercise 2.2 Exercise 2.3 Exercise 2.4 Exercise 2.5 Exercise 2.6 Exercise 2.7 Exercise 2.8 Exercise", " 2. Importing and Exporting Data In this exercise, you will practice how to download, access, and import data from the UK Data Service in R. You will use data from the 2019 British Social Attitudes Survey, Poverty and Welfare: Open Access Teaching Dataset. British Social Attitudes Survey, 2019, Poverty and Welfare: Open Access Teaching Dataset Reference University of Manchester, Cathie Marsh Institute for Social Research (CMIST), UK Data Service. (2022). British Social Attitudes Survey, 2019, Poverty and Welfare: Open Access Teaching Dataset. [data collection]. NatCen Social Research, [original data producer(s)]. NatCen Social Research. SN: 8850, DOI: http://doi.org/10.5255/UKDA-SN-8850-1 Copyright Data download and access under a Creative Commons Attribution 4.0 International licence. Navigate to the British Social Attitudes Survey (2019) webpage on the UK Data Service website. Scroll down to the end of the webpage and download the dataset in both SPSS and STATA formats on your computer. To access the SPSS data file, unzip folder and open the folders in the following sequence: UKDA-8850-spss &gt; spss &gt; spss25 Follow the same approach for accessing the STATA file. Place the two files you downloaded in your root R project working directory in a subfolder called data. The recommended approach for a ‘clean’ working directory is to place all the data files you plan to use in a separate folder within your R project working directory. You should always use simple names that allow you easy access to the contents when you want to either explore the folder on your machine or specify the path to these folders in R. You should also keep both folders you downloaded (UKDA-8850-spss and UKDA-8850-stata) unzipped in your data folder. 2.1 Exercise Import the dataset in SPSS format; name this object bsas_spss. Code bsas_spss &lt;- read_spss(&quot;data/bsa2019_poverty_open.sav&quot;) ## Error in read_spss(&quot;data/bsa2019_poverty_open.sav&quot;): could not find function &quot;read_spss&quot; Did the import function work? Why? The read_spss() is a function from the haven package. If you loaded haven before you attempted to import the data file, then you should not have encountered any issue. However, if you did not, you would have been prompted by an error (as shown above). To load installed packages, use the library() function. Remember to always start your work in R by first loading all the packages that you require for your session. 2.2 Exercise Import the dataset in STATA format; name this object bsas_stata. Code bsas_stata &lt;- read_dta(&quot;data/bsa2019_poverty_open.dta&quot;) How many observations and variables do the bsas_spss and bsas_stata objects have? Are these identical for both objects? There are many different ways to find the number of observations and variables such as looking at the information in the Environment tab. Since both data files are identical, both objects contain an identical number of observations and variables. 2.3 Exercise Export bsas_spss and bsas_stata in .RData format. Name this file bsas_objects. Code save(bsas_spss, bsas_stata, file = &quot;data/bsas_objects.RData&quot;) Remember to keep your root working directory organised and save/export your data files in your data folder. 2.4 Exercise Now export bsas_spss in .RDS format and name it bsas_spss_file. Code saveRDS(bsas_spss, &quot;data/bsas_spss_file.RDS&quot;) 2.5 Exercise Finally, export bsas_stata as a .csv file and name it bsas_csv_file. Code write.csv(bsas_stata, &quot;data/bsas_csv_file.csv&quot;) 2.6 Exercise Import the .csv file you have created and name this object bsas_stata2. View the contents of the bsas_stata2 and bsas_stata objects. Code bsas_stata2 &lt;- read.csv(&quot;data/bsas_csv_file.csv&quot;) Are there any differences between the two data objects? If so, why? You can have a look at the two data objects using View(). The bsas_stata object imported with the haven package has accompanying metadata. When exporting data files with metadata as .csv files, this metadata is lost because this type of format does not support metadata in the same way that files such as SPSS and STATA do. Also, you may note that the bsas_stata2 has 27 rather than 26 variables; by default, the write.csv() function will automatically number each row in the data file and therefore, will produce an additional column. 2.7 Exercise Now import the .RDS you created earlier (bsas_spss_file) and name this object bsas_spss2. Code bsas_spss2 &lt;- readRDS(&quot;data/bsas_spss_file.RDS&quot;) 2.8 Exercise Finally, load the .Rdata file you created previously (bsas_objects). Code load(&quot;data/bsas_objects.RData&quot;) You will use some of these data objects in future practicals. Please make sure that you keep all of the data files from this section in your data folder. "],["bonus-task-data-on-github.html", "3. Bonus Task: Data on GitHub 3.1 Exercise 3.2 Exercise 3.3 Exercise 3.4 Exercise", " 3. Bonus Task: Data on GitHub Importing Data from Github Repositories Many different types of data can be imported in R using either base R functions or functions from packages. However, R is not limited to importing ‘hard copy’ files from your machine but also supports direct import of data files located on websites for example. GitHub is a cloud-based, online platform that allows programming users to openly share research projects, associated documentation, data files, and comments with other users and/or the public. You will learn more about GitHub later in the course. Explore the Johns Hopkins Whiting School of Engineering COVID-19 Github Repository. Open the csse_covid_19_data folder found at the beginning of the page. Then open the csse_covid_19_time_series folder. Click on time_series_covid19_confirmed_global.csv link. Click on the Raw button on the right hand side of the screen. The webpage will now show you a long series of numbers. This is the ‘data file’ that you need to import. Note that this file is a .csv file. The same base R function you have previously used will also work in this case. 3.1 Exercise To import the data file, create a new object called covid_johnshop. Within the base R .csv function, paste the full data file web link. Do not forget to enclose this link with quotation marks. Code covid_johnshop &lt;- read.csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&quot;) 3.2 Exercise View the contents of this object. Code View(covid_johnshop) 3.3 Exercise Find the class of the object. Code class(covid_johnshop) ## [1] &quot;data.frame&quot; 3.4 Exercise Export the data as a .csv file. Code write.csv(covid_johnshop, &quot;data/covid_johnshop.csv&quot;) "],["overview-1.html", "Overview", " Overview Section 2: The Structure of Data Objects Learning Outcomes: Differentiate between vectors, data frames, lists, and matrices; Apply rules of various data structures to create different types of objects; Explore different types of data objects using suitable functions; Calculate summary statistics; Make effective use of data dictionaries; Perform basic transformation and recoding tasks using base R functions. In this section, you will be introduced to the following functions:: Function Description Package factor() create factors base R data.frame() create data frames base R list() create lists base R matrix() create matrices base R dim() find dimensions of object (e.g. number of variables and observations) base R attributes() find attributes/characteristics of object base R str() view internal structure of object base R table() build contingency table base R head() view first parts of data object base R tail() view last parts of data object base R colnames() find or set row or column names of a matrix-like object base R names() find or set row or column names of a data object base R summary() obtain summary statistics base R sum() obtain of sum of values base R is.na() identifies NA values; returns a logical output (TRUE/FALSE) for each element in an object base R Remember to continue working in the RStudio project you created for this course and typing your answers in separate R scripts. "],["practical-1.html", "Practical 1 1.1 Vectors and Factors 1.2 Data Frames and Lists 1.3 Matrices and Arrays 1.4 Bonus Task", " Practical 1 1.1 Vectors and Factors 1.1.1 Exercise Create and print a vector object named data_vct that contains the following values: 8, incorrect, 9.8. Code data_vct &lt;- c(8, &quot;incorrect&quot;, 9.8) data_vct ## [1] &quot;8&quot; &quot;incorrect&quot; &quot;9.8&quot; What output does R produce? Why? Vectors can only contain a single data type since they are homogenous structures and in this exercise, there are two data types in this vector, namely numeric and character. When R detects multiple data types within a vector, it will, by default, coerce all values to a single data type. Since the character value cannot be coerced to a numeric value, R will coerce all values to character. This is irrespective of whether the values are logical or numeric. Alternatively, if you did not place the word “incorrect” between inverted commas such as data_vct &lt;- c(8, incorrect, 9.8), then the attempt to create the vector would have failed and you would have been prompted by an error message: Error: object 'incorrect' not found. The reason for this is that only logical values can be specified as text in vectors without inverted commas; anything else will be a character value and must be specified within inverted commas. 1.1.2 Exercise Create a vector object named data_vct2 that contains the following values: 8, FALSE, 9.8. Code data_vct2 &lt;- c(8, FALSE, 9.8) class(data_vct2) ## [1] &quot;numeric&quot; What output does R produce? What class is this vector? Why? This is another example of how R coerces values to have a consistent data type when detecting heterogeneity in a vector. In this case, the word FALSE must be specified as a logical value. This value is coerced to numeric because, by default, logical values in R are converted to 0 and 1, corresponding to FALSE and TRUE respectively. Alternatively, if you have specified the word FALSE as a character value, then the logical value would have been coerced to a character value and the vector would have been a vector of class character. 1.1.3 Exercise Create a vector object named data_vct3 that contains the following values: 8, False, 9.8, True. Code data_vct3 &lt;- c(8, False, 9.8, True) ## Error in eval(expr, envir, enclos): object &#39;False&#39; not found What output does R produce? Why? If your treated this value as a logical value, then you would have obtained an error since logical values are case sensitive and can only take two different forms: TRUE or T, FALSE or F. 1.1.4 Exercise Create a factor named data_fct that contains the following values: bus, car, car, car, train, bus, bus, train, train. Print the contents, find the number of levels, and confirm the class. Code data_fct &lt;- factor(c(&quot;bus&quot;, &quot;car&quot;, &quot;car&quot;, &quot;car&quot;, &quot;train&quot;, &quot;bus&quot;, &quot;bus&quot;, &quot;train&quot;, &quot;train&quot;)) data_fct class(data_fct) This object is of class factor and has three levels bus, car, train. The output should look like below: data_fct [1] bus car car car train bus bus train train Levels: bus car train class(data_fct) [1] \"factor\" 1.1.5 Exercise Create three vectors as follows: A numeric vector called num_vct which contains the following values: 50, 10, 45, 90. A character vector called char_vct which contains the following values: This, is, a, string, vector. A logical vector called logic_vct which contains the following values: TRUE, FALSE, FALSE, TRUE, TRUE. Code num_vct &lt;- c(50, 10, 45, 90) char_vct &lt;- c(&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;string&quot;, &quot;vector&quot;) logic_vct &lt;- c(TRUE, FALSE, FALSE, TRUE, TRUE) 1.2 Data Frames and Lists 1.2.1 Exercise Create a data frame called df by combing the following three vectors you previously created (num_vct, char_vct, logic_vct). Code df &lt;- data.frame(num_vct, char_vct, logic_vct) ## Error in data.frame(num_vct, char_vct, logic_vct): arguments imply differing number of rows: 4, 5 What does the R output say? Why? As you probably already noticed when finding the lengths of each vector earlier in the practical, the numeric vector has 4 rows whilst the character and logical vectors have 5 rows. When creating data frames, all vectors must have the same length, otherwise, you will be prompted by an error: Error in data.frame(num_vct, char_vct, logic_vct) : arguments imply differing number of rows: 4, 5. 1.2.2 Exercise Since a data frame cannot be created with vectors of different lengths, try to instead create a list object called list_one and print the contents. Code # Creating the list list_one &lt;- list(num_vct, char_vct, logic_vct) # Printing the list. list_one ## [[1]] ## [1] 50 10 45 90 ## ## [[2]] ## [1] &quot;This&quot; &quot;is&quot; &quot;a&quot; &quot;string&quot; &quot;vector&quot; ## ## [[3]] ## [1] TRUE FALSE FALSE TRUE TRUE Did you successfully create a list? Why did this work (or didn’t)? The list was created successfully since lists are both heterogenous structures and can take different types of items regardless of their structure. No error message should appear. Can you find out how many variables and observations this list has? How about the number of items? List structures do not have variables or observations since they are a storage mode of different types of items. Instead, lists are defined by the number of items they contain. If you print the contents, you can confirm that this list has 3 items. 1.2.3 Exercise Use the View() function to visualise the contents of the list you have just created. Code View(list_one) Is the output similar to that from a data frame object? Why not? The View() function produces a different output for lists than in does for data frames since these are different structures. Data frames have rows and columns whilst lists have items. The view function is not very useful for lists because it is designed for users to visualise data values, but it does provide some relevant information such as the number of items, the data type of each item, and a compact summary of the values of each item. 1.2.4 Exercise Create a new vector called num_vct3 with the following values: 50, 10, 45, 90, 5. Code num_vct3 &lt;- c(50, 10, 45, 90, 5) 1.2.5 Exercise Create a data frame called df_one by combing num_vct3 with the following logical and character vectors you created earlier (char_vct, logic_vct). Then print the contents. Code df_one &lt;- data.frame(num_vct3, char_vct, logic_vct) df_one ## num_vct3 char_vct logic_vct ## 1 50 This TRUE ## 2 10 is FALSE ## 3 45 a FALSE ## 4 90 string TRUE ## 5 5 vector TRUE How many variables and observations does this data frame have? There are 5 observations of 3 variables. This is easy to identify with small data objects such as this one. For larger datasets, you can easily spot this by looking under the Environment tab. 1.2.6 Exercise Create a list called list_two by combining three of the vectors you created earlier (num_vct3, num_vct, char_vct, logic_vct). Code list_two &lt;- list(num_vct3, num_vct, char_vct, logic_vct) 1.3 Matrices and Arrays 1.3.1 Exercise Create and print a matrix named matrix_one that contains the following values: 1, 4, 6, 10. The values must be placed in two rows and two columns. Code matrix_one &lt;- matrix(c(1,4,6,10), nrow = 2, ncol = 2) matrix_one ## [,1] [,2] ## [1,] 1 6 ## [2,] 4 10 1.3.2 Exercise Create and print a matrix named matrix_two that contains the following sequence of values: 10 to 13. The values must be placed in one row row and four columns. Code matrix_two &lt;- matrix(10:13, nrow = 1, ncol = 4) matrix_two ## [,1] [,2] [,3] [,4] ## [1,] 10 11 12 13 1.3.3 Exercise Create a matrix named matrix_three using the following numeric vector you created earlier (num_vct). The values must be placed in four rows and one column. Print the contents. Code matrix_three &lt;- matrix(num_vct, nrow = 4, ncol = 1) matrix_three ## [,1] ## [1,] 50 ## [2,] 10 ## [3,] 45 ## [4,] 90 1.4 Bonus Task Create a list using the list of items below and name it list_example. Print the contents num_vct matrix_three df_one list_two “character string” 1000 Code list_example &lt;- list(num_vct, matrix_three, df_one, list_two, &quot;character string&quot;, 1000) list_example ## [[1]] ## [1] 50 10 45 90 ## ## [[2]] ## [,1] ## [1,] 50 ## [2,] 10 ## [3,] 45 ## [4,] 90 ## ## [[3]] ## num_vct3 char_vct logic_vct ## 1 50 This TRUE ## 2 10 is FALSE ## 3 45 a FALSE ## 4 90 string TRUE ## 5 5 vector TRUE ## ## [[4]] ## [[4]][[1]] ## [1] 50 10 45 90 5 ## ## [[4]][[2]] ## [1] 50 10 45 90 ## ## [[4]][[3]] ## [1] &quot;This&quot; &quot;is&quot; &quot;a&quot; &quot;string&quot; &quot;vector&quot; ## ## [[4]][[4]] ## [1] TRUE FALSE FALSE TRUE TRUE ## ## ## [[5]] ## [1] &quot;character string&quot; ## ## [[6]] ## [1] 1000 Is it possible for a list to contain any type of data structure and if so why? Can you find out how many items the list has? Lists are highly flexible data structures and can contain any data type or object items, regardless of whether they are single values, or more complex structures. Lists also support nesting, which means that they can also contain other lists. There are 6 items in this list: a vector, a matrix, a data frame, a list, a character value, and a numeric value. This list is quite a large one and printing the contents is not a very useful way to view the items. You will learn alternatives functions to display data structures more compactly later in the course. "],["practical-2.html", "Practical 2 2.1 Exploring Homogenous Data Structures 2.2 Exploring Heterogenous Data Structures", " Practical 2 2.1 Exploring Homogenous Data Structures 2.1.1 Exercise Create the following vectors: A numeric vector called numeric_vct comprising of: 8, 10, 5, 9, 6, 0, 2, 3. A character vector called char_vct comprising of: bus, train, train, car, car, bus, train, bus. A factor called commuting comprising of the same values as those of char_vct. A factor called commuting2 comprising of the same values as those of commuting. Use the levels argument to specify the following levels to the factor: bus, car, train, taxi. A numeric vector called num_vct comprising of: 1, 2, 1, 3, 2, 3, 3, 1, 1, 2, 2, 4, 2, 4, 4. Transform this numeric vector into a factor called education and assign it the following labels: GCSE, Alevel, undergraduate, graduate. Code numeric_vector &lt;- c(8, 10, 5, 9, 6, 0, 2, 3) char_vct &lt;- c(&quot;bus&quot;, &quot;train&quot;, &quot;train&quot;, &quot;car&quot;, &quot;car&quot;, &quot;bus&quot;, &quot;train&quot;, &quot;bus&quot;) commuting &lt;- factor(char_vct) commuting2 &lt;- factor(char_vct, levels = c(&quot;bus&quot;, &quot;car&quot;, &quot;train&quot;, &quot;taxi&quot;)) num_vct &lt;- c(1, 2, 1, 3, 2, 3, 3, 1, 1, 2, 2, 4, 2, 4, 4) education &lt;- factor(num_vct, labels = c(&quot;GCSE&quot;, &quot;Alevel&quot;, &quot;undergraduate&quot;, &quot;graduate&quot;)) Explore commuting and commuting2 using the table() function. How do the levels and number of observations of these two vectors differ? Code table(commuting) table(commuting2) The object values are of course identical for levels bus, car, and train but you have also added one more level to commuting2, namely taxi. As you would have seen in the output in your RStudio console, there are zero observations for this factor level. &gt; table(commuting2) bus car train taxi 3 2 3 0 Versus &gt; table(commuting) bus car train 3 2 3 This illustrates that levels can be added to factors even though observations for that particular level are not present in the ‘dataset’. This is an important feature of factors during statistical analysis since the absence of data is meaningful for categorical variables. 2.1.2 Exercise Create a matrix object called matrix_object using one of the numeric vectors you created earlier (numeric_vector). The matrix must have 2 rows and 4 columns. Code matrix_object &lt;- matrix(numeric_vector, nrow = 2, ncol = 4) Find the class, length, and dimensions. Code class(matrix_object) ## [1] &quot;matrix&quot; &quot;array&quot; Code length(matrix_object) ## [1] 8 Code dim(matrix_object) ## [1] 2 4 2.2 Exploring Heterogenous Data Structures Exercise 2.2.1 Create a data frame called data_frame by combining the three objects you created earlier (numeric_vector, char_vct, and commuting). Code data_frame &lt;- data.frame(numeric_vector, char_vct, commuting) Find the class, dimensions and attributes. Code class(data_frame) ## [1] &quot;data.frame&quot; Code dim(data_frame) ## [1] 8 3 Code attributes(data_frame) ## $names ## [1] &quot;numeric_vector&quot; &quot;char_vct&quot; &quot;commuting&quot; ## ## $class ## [1] &quot;data.frame&quot; ## ## $row.names ## [1] 1 2 3 4 5 6 7 8 Exercise 2.2.2 Compactly view the first and last parts of the data_frame object. Code head(data_frame) ## numeric_vector char_vct commuting ## 1 8 bus bus ## 2 10 train train ## 3 5 train train ## 4 9 car car ## 5 6 car car ## 6 0 bus bus Code tail(data_frame) ## numeric_vector char_vct commuting ## 3 5 train train ## 4 9 car car ## 5 6 car car ## 6 0 bus bus ## 7 2 train train ## 8 3 bus bus Exercise 2.2.3 Find the names of the columns of data_frame. Code colnames(data_frame) ## [1] &quot;numeric_vector&quot; &quot;char_vct&quot; &quot;commuting&quot; Code # OR names(data_frame) ## [1] &quot;numeric_vector&quot; &quot;char_vct&quot; &quot;commuting&quot; Exercise 2.2.4 Create a list called list_combined by combining the following objects you previously created (numeric_vector, commuting, education, and data_frame). Code list_combined &lt;- list(numeric_vector, commuting, education, data_frame) Exercise 2.2.5 View the contents of list_combined in a compact form. Code str(list_combined) ## List of 4 ## $ : num [1:8] 8 10 5 9 6 0 2 3 ## $ : Factor w/ 3 levels &quot;bus&quot;,&quot;car&quot;,&quot;train&quot;: 1 3 3 2 2 1 3 1 ## $ : Factor w/ 4 levels &quot;GCSE&quot;,&quot;Alevel&quot;,..: 1 2 1 3 2 3 3 1 1 2 ... ## $ :&#39;data.frame&#39;: 8 obs. of 3 variables: ## ..$ numeric_vector: num [1:8] 8 10 5 9 6 0 2 3 ## ..$ char_vct : chr [1:8] &quot;bus&quot; &quot;train&quot; &quot;train&quot; &quot;car&quot; ... ## ..$ commuting : Factor w/ 3 levels &quot;bus&quot;,&quot;car&quot;,&quot;train&quot;: 1 3 3 2 2 1 3 1 What does the output tell you about list_combined? The str() function provides the total number of items in an object (in this case a list), the class of each item, as well as the number of elements within each item. There are 4 items; in the order in which they would appear in your console, these are: a numeric vector of 8 elements, a factor with 3 levels, a factor with 4 levels, and a data frame composed of a numeric, character, and factor. "],["practical-3.html", "Practical 3 3.1 Exploring Data Files 3.2 Subsetting 3.3 Basic Transformations", " Practical 3 3.1 Exploring Data Files In Section 1, you have completed a series of file import/export exercises using data from British Social Attitudes Survey (2019): Open Access Teaching Dataset. British Social Attitudes Survey, 2019, Poverty and Welfare: Open Access Teaching Dataset Reference University of Manchester, Cathie Marsh Institute for Social Research (CMIST), UK Data Service. (2022). British Social Attitudes Survey, 2019, Poverty and Welfare: Open Access Teaching Dataset. [data collection]. NatCen Social Research, [original data producer(s)]. NatCen Social Research. SN: 8850, DOI: http://doi.org/10.5255/UKDA-SN-8850-1 Copyright Data download and access under a Creative Commons Attribution 4.0 International licence. For this practical, you will use one of the objects you have exported as a .csv file in your R project data folder, namely the bsas_stata object. 3.1.1 Exercise Import the bsas_stata .csv object and name this object bsas_dataset. Code bsas_dataset &lt;- read.csv(&quot;data/bsas_stata_file.csv&quot;) Explore the structure of the data object and confirm its class. How many observations and variables does this object have? Use the class() function to confirm that the data object is a data.frame. You can explore the structure of the object in various ways such as using the str() function which also tells you the number of observations and variables. You can also, of course, obtain this information from your Environment pane. 3.1.2 Exercise Obtain a compact summary statistics output. Code summary(bsas_dataset) ## X Sserial WtFactor RSex ## Min. : 1.0 Min. :310001 Min. :0.2950 Min. :1.000 ## 1st Qu.: 806.8 1st Qu.:310807 1st Qu.:0.5865 1st Qu.:1.000 ## Median :1612.5 Median :311613 Median :0.9042 Median :2.000 ## Mean :1612.5 Mean :311613 Mean :1.0000 Mean :1.549 ## 3rd Qu.:2418.2 3rd Qu.:312418 3rd Qu.:1.2064 3rd Qu.:2.000 ## Max. :3224.0 Max. :313224 Max. :4.4400 Max. :2.000 ## RAgeCat eq_inc_quintiles RClassGp HEdQual3 ## Min. :1.000 Min. :-1.000 Min. :-1.000 Min. :1.00 ## 1st Qu.:3.000 1st Qu.:-1.000 1st Qu.: 1.000 1st Qu.:2.00 ## Median :4.000 Median : 2.000 Median : 2.000 Median :2.00 ## Mean :4.569 Mean : 1.874 Mean : 2.722 Mean :2.56 ## 3rd Qu.:7.000 3rd Qu.: 4.000 3rd Qu.: 5.000 3rd Qu.:3.00 ## Max. :8.000 Max. : 5.000 Max. : 8.000 Max. :8.00 ## Married ChildHh skipmeal paptype ## Min. :1.000 Min. :1.00 Min. :-1.0000 Min. :0.000 ## 1st Qu.:1.000 1st Qu.:1.00 1st Qu.:-1.0000 1st Qu.:0.000 ## Median :1.000 Median :2.00 Median : 1.0000 Median :0.000 ## Mean :2.036 Mean :1.68 Mean : 0.4935 Mean :0.348 ## 3rd Qu.:3.000 3rd Qu.:2.00 3rd Qu.: 1.0000 3rd Qu.:0.000 ## Max. :9.000 Max. :2.00 Max. : 9.0000 Max. :8.000 ## SMNews PartyId2 Politics SocTrust ## Min. : 1.000 Min. :-1.00 Min. :1.000 Min. :-1.0000 ## 1st Qu.: 2.000 1st Qu.: 1.00 1st Qu.:2.000 1st Qu.:-1.0000 ## Median : 8.000 Median : 2.00 Median :3.000 Median :-1.0000 ## Mean : 5.636 Mean : 3.04 Mean :2.869 Mean :-0.1051 ## 3rd Qu.: 8.000 3rd Qu.: 5.00 3rd Qu.:4.000 3rd Qu.: 1.0000 ## Max. :98.000 Max. : 8.00 Max. :9.000 Max. : 8.0000 ## Spend1 Dole TaxSpend MuchPov ## Min. :-1.0000 Min. :1.000 Min. :1.000 Min. :1.00 ## 1st Qu.:-1.0000 1st Qu.:1.000 1st Qu.:2.000 1st Qu.:1.00 ## Median :-1.0000 Median :2.000 Median :3.000 Median :2.00 ## Mean : 0.6845 Mean :2.303 Mean :2.676 Mean :1.97 ## 3rd Qu.: 3.0000 3rd Qu.:3.000 3rd Qu.:3.000 3rd Qu.:2.00 ## Max. :98.0000 Max. :9.000 Max. :9.000 Max. :9.00 ## Poverty1 Poverty2 NatFrEst incdiffs ## Min. :1.000 Min. :1.00 Min. : 0.0 Min. :-1.0000 ## 1st Qu.:1.000 1st Qu.:1.00 1st Qu.: 12.0 1st Qu.:-1.0000 ## Median :2.000 Median :1.00 Median : 35.0 Median : 1.0000 ## Mean :1.865 Mean :1.56 Mean :109.2 Mean : 0.7382 ## 3rd Qu.:2.000 3rd Qu.:2.00 3rd Qu.: 60.0 3rd Qu.: 2.0000 ## Max. :9.000 Max. :8.00 Max. :999.0 Max. : 9.0000 ## welfare2 leftrigh libauth ## Min. :-1.000 Min. :-1.000 Min. :-1.000 ## 1st Qu.: 1.875 1st Qu.: 1.600 1st Qu.: 2.500 ## Median : 2.625 Median : 2.400 Median : 3.333 ## Mean : 2.156 Mean : 2.006 Mean : 2.797 ## 3rd Qu.: 3.125 3rd Qu.: 3.000 3rd Qu.: 4.000 ## Max. : 9.000 Max. : 9.000 Max. : 9.000 Do you think all of these variables are actually numeric? Why? No; variables in survey datasets are often coded in numeric form, regardless of whether these are actually numeric or categorical. Datasets from reputable sources such as the UK Data Service (UKDS), are accompanied by data dictionaries which describe and explain in detail what each variable measures and how it is coded in the data file. For data that you download from the UKDS, the data dictionary can be found in the mrdoc folder. In general, datasets from the UKDS will be available in a format that hosts metadata (e.g. Stata, SPSS). This means that if you explore the variables in a SPSS or Stata data file you imported in R, you will note that variables are accompanied by metadata. Those which are categorical are also accompanied by labels which describe the categories to which numeric values belong. However, since you are now using the file you exported as a .csv, you will remember that such files do not host any metadata. 3.1.3 Exercise To practice using data dictionaries, open the mrdoc subfolder within the main folder you downloaded for the Stata file (UKDA-8850-stata). Extract the file from the zippeed ukda_data_dictionaries folder. Find the following variables in the data dictionary: NatFrEst, RSex, Married, and RAgeCat. What do these variables measure and how are they coded? According to the data dictionary: NatFrEst asks survey respondents to provide an estimated numeric value for the following question: Out of every 100 people receiving benefits in Britain, how many have broken the law by giving false information to support their claim?. RSex represents the sex of the respondent. Males are numerically labelled as “1” and females as “2”. Married represents the marital status of the respondent. There are four categories labelled “1” to “4”. RAgeCat represents the age category into which the respondent falls. Age is grouped into 7 categories labelled “1” to “7”. 3.2 Subsetting 3.2.1 Exercise Create a new data frame object called bsas_sample that contains the following variables in this order: NatFrEst, RSex, Married, and RAgeCat. Code bsas_sample &lt;- bsas_dataset[c(&quot;NatFrEst&quot;, &quot;RSex&quot;, &quot;Married&quot;, &quot;RAgeCat&quot;)] As you have already seen in the lecture materials, there are various ways to achieve this. One simple way is to specify a character vector of variable names using c() within square brackets used to subset a data object. 3.2.2 Exercise Find the class of variable Married. Code class(bsas_sample$Married) ## [1] &quot;integer&quot; Would you be able to analyse this variable as it is, without any further transformation? In most cases, the answer would be NO, since this variable is categorical and should be coded as a factor. If you also explore RSex and RAgeCat, you would also see that they are also of class integer. To ensure that you recode all relevant variables correctly, you must consult the data dictionaries. 3.3 Basic Transformations 3.3.1 Exercise Use colnames() function to change the names of the variables as follows: NatFrEst to false_benefits RSex to sex Married to marital_status RAgeCat to age_cat Code colnames(bsas_sample) &lt;- c(&quot;false_benefits&quot;, &quot;sex&quot;, &quot;marital_status&quot;, &quot;age_category&quot;) Now confirm that the column names have been changed. Code colnames(bsas_sample) ## [1] &quot;false_benefits&quot; &quot;sex&quot; &quot;marital_status&quot; &quot;age_category&quot; Code # You can use the same function or, more simply: # names(bsas_sample) 3.3.2 Exercise Using the table() function, explore the contents of the variable false_benefits. Code table(bsas_sample$false_benefits) ## ## 0 1 2 3 4 5 6 7 8 9 10 12 13 15 18 19 20 23 25 27 ## 8 68 82 43 25 192 3 14 10 1 354 7 1 90 1 1 286 1 190 3 ## 30 32 33 35 38 40 42 43 45 46 47 48 49 50 51 55 56 57 59 60 ## 194 2 19 45 1 188 1 3 23 2 1 2 1 436 2 20 1 2 1 160 ## 63 65 66 68 69 70 75 78 79 80 82 85 86 88 90 93 95 98 99 100 ## 1 29 2 2 2 107 77 2 1 126 2 18 1 2 58 1 10 4 19 30 ## 998 999 ## 242 4 Are there any strange values and if so, what do they mean? Based on the data dictionary you have consulted in the previous exercise, you should already know that each one of the four variables, regardless of whether it is measured on a numeric or nominal scale, has labels that denote missing data. For the variable false_benefits, there are several missing data since both 998 and 999 labels appear in the table. This type of information is very important for recoding/transforming variables correctly. 3.3.3 Exercise Perform the following modifications to the variables below: For marital_status, change the 9 values to NA. For age_category , change the 8 values to NA. For false_benefits, change the 998 and 999 values to NA. Code bsas_sample$marital_status[bsas_sample$marital_status == 9] &lt;- NA bsas_sample$age_category[bsas_sample$age_category == 8] &lt;- NA bsas_sample$false_benefits[bsas_sample$false_benefits &gt; 900] &lt;- NA For the false_benefits variable, the simplest approach is to specify a value large enough to encompass both 998 and 999. In this case, the maximum value is 100 after which there are no values corresponding to any number between 100 and 998. How many NA values does the variable false_benefits have in total? Code sum(is.na(bsas_sample$false_benefits)) ## [1] 246 3.3.4 Exercise For the sex variable, change the 1 values to Male and the 2 values to Female. Code bsas_sample$sex[bsas_sample$sex == 1] &lt;- &quot;Male&quot; bsas_sample$sex[bsas_sample$sex == 2 ] &lt;- &quot;Female&quot; For the purposes of this practical, it is acceptable to perform factor recoding for each category individually. You will learn how to do this more efficiently later in in the course. Now confirm the changes using a suitable function. Code table(bsas_sample$sex) ## ## Female Male ## 1770 1454 What is the class of the variable now? Code class(bsas_sample$sex) ## [1] &quot;character&quot; After changing the numeric labels to character labels, the variable is now of class character. To make this variable a factor, we need an extra step: bsas_sample$sex &lt;- factor(bsas_sample$sex). 3.3.5 Exercise Create a new vector object called id that contains a sequence of values from 1 to 3,224. Code id &lt;- 1:3224 Add id as a column to the bsas_sample data frame. Code bsas_sample$id &lt;- id Where in the data frame was id added? Code str(bsas_sample) ## &#39;data.frame&#39;: 3224 obs. of 5 variables: ## $ false_benefits: int 5 30 50 50 50 10 1 NA 5 50 ... ## $ sex : chr &quot;Female&quot; &quot;Female&quot; &quot;Female&quot; &quot;Male&quot; ... ## $ marital_status: int 1 2 1 4 4 1 4 1 1 4 ... ## $ age_category : int 6 3 4 2 6 4 2 4 4 1 ... ## $ id : int 1 2 3 4 5 6 7 8 9 10 ... You can find this out in various ways, one being str(). The new column was added at the end of the data frame. The purpose of adding an ID column is to uniquely identify each case within the data frame (in cases where no such ID exists). You will learn more about why this is important, later in the course. 3.3.6 Exercise Reorder the variables of bsas_sample as follows: id, RSex, RAgeCat, Married, and NatFrEst. Code bsas_sample &lt;- bsas_sample[, c(&quot;id&quot;, &quot;sex&quot;, &quot;age_category&quot;, &quot;marital_status&quot;, &quot;false_benefits&quot;)] Confirm the change in order using a suitable function. Code # You can use the names() function, for example. names(bsas_sample) ## [1] &quot;id&quot; &quot;sex&quot; &quot;age_category&quot; &quot;marital_status&quot; ## [5] &quot;false_benefits&quot; "],["overview-2.html", "Overview", " Overview Section 4: Reproducible Workflows with R Markdown Learning Outcomes: ADD ILOS. In this section, you will practice how to use the following functions: Function Description Package c() concatenate function base R WARNING 1: Before proceeding to the exercises, ensure that you create and work in a RStudio project and that you write and save your answers to the exercises in an R script. WARNING 2: To adequately develop your practical programming skills, it is essential that you attempt all exercises by typing out the code rather than simply copy-pasting the answers. "],["practical-1-1.html", "Practical 1 1. Installing Git and GitHub Desktop 2. Connecting to GitHub with GitHub Desktop 0.1 3.Creating a Special Type of R project: the Version Control R Project 4. Creating a Repository and Connecting your Version Control Project 0.2 5. Adding New Files to your Repository 6. Modifying Existing Repository Files", " Practical 1 1. Installing Git and GitHub Desktop Sign up with GitHub: https://github.com/ and explore the different options on the page. Your profile as well as your repositories can be accessed by clicking on the top right corner of the webpage. Install Git: https://git-scm.com/downloads. During installation, ensure that R and RStudio are not open. During the installation process, you will be prompted with many different options. Ensure that you continue the installation without changing any of the default options. Install the latest version of GitHub desktop: https://desktop.github.com/ 2. Connecting to GitHub with GitHub Desktop Open GitHub Desktop. Click on File from the menu at the top of the GitHub window, and select Options. A new window will open. Select Accounts and then click on Sign in. You will then be prompted to Sign in Using Your Browser. After clicking on Continue With Browser, GitHub Desktop will open in your default browser. You will then be prompted to Sign in with GitHub to continue with GitHub Desktop. Type in the details you have used to create the GitHub account and click on Sign in. Your GitHub Desktop is now ready to use. 0.1 3.Creating a Special Type of R project: the Version Control R Project Create a new R Project in the same way as you have done before. Once your R project is ready, navigate to the Tools menu and select Version Control, then Project setup. You will be prompted by the Git/SVN dialogue box. Using the drop down menu from underneath Version Control System, change the NONE option to Git. When asked if you want to initialise a new git repository for this project, click YES. When asked if you want to restart R project, click YES. Once RStudio reinitialises, you will see a new tab in the upper right hand corner next to Environment, History, Connections called Git. This is confirmation that you have connected your project with Git. Whilst working in this R Project, all new documents and changes to the files that you make will appear as a list under the Git tab and you can use this tab to make commits to the central repo. Keep your RStudio open for now. 4. Creating a Repository and Connecting your Version Control Project Return to GitHub Desktop. Navigate to the File menu once again and select New Repository. In the Local Path, use the root working directory location of your newly created R project. A message will appear telling you that this directory appears to be a GitHub repository. You will also be asked if you want to add this repository instead. Click on the add this repository instead link. When prompted, click on Create Repository. By default, the repository will be set to private, meaning that others cannot see your repository unless given permission. Once GitHub creates your repository you will see several options. To publish your repository to the online GitHub platform, click on Publish Repository. When prompted, click on Publish Repository again. You should now be able to see your new repository both in the GitHub Desktop and online on the GitHub website. Explore both the GitHub desktop application and the GitHub website to familiarise yourself with the environment. You will also notice that a branch was created automatically; this means that everything that you change or add to your local project will be tracked and will be added to the central repository though commit actions. Since you own this repository, you cannot create a fork but you can create branches. Optional: To create a new branch with GitHub Desktop, simply click on Current Branch and then select New Branch from the dialogue box. You will be asked whether you want to create a branch that is not dependent on your current branch or one that builds on the work done on the current branch. Depending on whether you want to start fresh work or whether you want to take a different development route to the work in your existing branch, GitHub is flexible. You can then switch between branches and even merge them. For now, make sure to keep both the GitHub page and GitHub Desktop open (you can minimise them). 0.2 5. Adding New Files to your Repository In your newly created R project, navigate to the New File icon, select R Markdown, then click on From Template. From the menu, select GitHub Document (Markdown) and click Create. Click on the Knit button. Once the process is complete, your file will appear in your root R project working directory. You will learn more about knitting and rendering documents in later lectures. Now have a look at the Git tab. You should now see two files appear there, a file with the extension .Rmd file and one with the .md extension. These two files are accompanied by yellow symbols. This means that these files are not present in the repository and any changes that you make will only be saved on your computer hard drive. For now, do not perform any additional actions on these files. Now maximise the GitHub Desktop window. You should also see that these two new files have now appeared under the Changes tab. At the moment, these two files are on your computer hard drive, in the R project working directory. To add them to your local repository, you must add them to the staging area and perform the commit actions. To then add these to the central repository you must also perform the push actions. You can do this either from RStudio directly or using GitHub Desktop (although it is easier and faster if you commit and push using GitHub Desktop rather than RStudio) OPTION 1: With GitHub Desktop To perform the commit action with GitHub Desktop is very simple. The two files you created will now appear in the application and will have already been automatically selected (confirm that they are accompanied by check marks). In the Summary box underneath the files, provide a short description of these files and then click on Commit to main. Once the software reinitialises, click on Push origin. Note that if you do not click on Push origin, these files will NOT be added to the central repository but will only be updated in your local repository. After you perform the push action, you should no longer see these two files under the Changes tab but you can track the history of the changes made to this project by clicking on the History tab. If you now navigate to your online GitHub account page, you should see these two new files in your central remote repository (refresh the page if these are not visible). Click on the .md file to see how it is presented on GitHub. OPTION 2: With RStudio To practice how to do this in RStudio, go back to your R Project and make sure that the Git tab is open; since you already performed the commit and push actions on the previous two files you created, the contents should be empty. Create a new R script, write some code, and save it. When the R script file appears in the Git tab, check the box next to the file. You will now notice that the status has changed to green which represents the action of adding the files to the staging area. To update these changes in your local repository, click Commit. when the dialogue box opens, you will notice that the overall format is similar to that of GitHub Desktop. The files are under the Changes tab, and all of the history of your actions can be seen in the History tab. Write a brief description of your files in the Commit Message box, and then click Commit again. The files will be updated in your local repository that you can access with GitHub Desktop application but will still not update the remote repository: to achieve this, you must then click on the Push button. RStudio will then connect with GitHub and you will see a confirmation that the files have been added to the remote repository in a new dialogue box (if prompted by a message asking you to grant access to Git, accept and proceed). To confirm this, simply go to your online GitHub or to GitHub Desktop. 6. Modifying Existing Repository Files Return to your RStudio project and make sure that your Git tab is open. Make any change to your R script and save it. Now have a look at the contents of your Git tab. You should now see the file appear again but this time, the status is set to “Modified”. This means that the system is detecting that this file already exists and it is being modified. If you have your GitHub Desktop open, you should see this change appear there also. To apply the changes made to the R script in the central repository, the same commit approach is used. As you have probably noticed, the GitHub Desktop approach to commit is slightly simpler and faster. This practical is but an introduction to GitHub designed to prepare you with the necessary skills to create your own repository and publish your files and work on remote GitHub using RStudio and GitHub Desktop. If you want to learn more about how to use GitHub and GitHub Desktop collaboratively, visit: https://docs.github.com/en/desktop. "],["practical-2-1.html", "Practical 2", " Practical 2 For this practical, you will be required to create a PDF Document using the built-in sample content provided by R Markdown. The R Markdown file you create should produce the following document: click here to view the file. You can view the file in your browser or save a copy on your computer. In addition to carefully exploring the attached output, follow the guidelines below: Use numbered level 1 section headings Set the font size to 10 Highlight the syntax using “haddock” Set the figure width to 5 and figure height to 4 using the chunk options Set the url colour to blue and the link color to orange Load the stargazer package in a separate chunk and suppress the code and messages from showing in the output using chunk options. Replace the summary(cars) code with linear model object as shown in the document. Insert a new chunk and create a table with stargazer using the model_A object. Customise the plot(pressure) output using chunk options so that the figure width is set to 5 and the figure height to 4. Also, align the output in the center of the page. AFTER you have attempted this activity on your own, have a look at the original .Rmd file here. You can view the file in your browser. If you want to save a copy, right-click on your mouse or keypad and select Save as. "],["overview-3.html", "Overview", " Overview Section 6: Working with Special Data Types: Text Data Learning Outcomes: ADD ILOS. In this section, you will practice how to use the following functions: Function Description Package c() concatenate function base R WARNING 1: Before proceeding to the exercises, ensure that you create and work in a RStudio project and that you write and save your answers to the exercises in an R script. WARNING 2: To adequately develop your practical programming skills, it is essential that you attempt all exercises by typing out the code rather than simply copy-pasting the answers. "],["exploring-string-objects-and-detecting-matches.html", "1. Exploring String Objects and Detecting Matches 1.1 Preparation 1.2 Task 1.3 Task 1.4 Task 1.5 Task 1.6 Task", " 1. Exploring String Objects and Detecting Matches 1.1 Preparation In this practical, you will need tidyverse and lubridate. Enter the code below in your R console to create two strings object called string1 and string2. You can copy-paste the code directly into your console. Code string1 &lt;- c(&quot;Many informal fallacies come out of a feature of human reasoning which lies so deep in us that,&quot;, &quot;according to the cognitive scientists Dan Sperber and Hugo Mercier,&quot;, &quot;it was a selective pressure that allowed reasoning to evolve.&quot;, &quot;We like to win arguments.&quot;, &quot;In an ideal forum, the winner of an argument is the one with the most cogent position.&quot;) string2 &lt;- c(&quot;Rationality:&quot;, &quot;What it is,&quot;, &quot;Why it seems Scarce,&quot;, &quot;Why it Matters&quot;, &quot;- Steven Pinker&quot;) 1.2 Task Join string1 with string2 and assign this output to a new object called string_quote. The final output should contain 10 separate strings. Code string3 &lt;- c(string1, string2) print(string3) ## [1] &quot;Many informal fallacies come out of a feature of human reasoning \\n which lies so deep in us that,&quot; ## [2] &quot;according to the cognitive scientists Dan Sperber and Hugo Mercier,&quot; ## [3] &quot;it was a selective pressure that allowed reasoning to evolve.&quot; ## [4] &quot;We like to win arguments.&quot; ## [5] &quot;In an ideal forum, the winner of an argument is the one with the \\n most cogent position.&quot; ## [6] &quot;Rationality:&quot; ## [7] &quot;What it is,&quot; ## [8] &quot;Why it seems Scarce,&quot; ## [9] &quot;Why it Matters&quot; ## [10] &quot;- Steven Pinker&quot; 1.3 Task Extract characters from each element of the string1 object based on positions 10 and 15. Start counting from the beginning of the string. Code str_sub(string3, 10, 15) ## [1] &quot;rmal f&quot; &quot; to th&quot; &quot;select&quot; &quot;o win &quot; &quot;al for&quot; &quot;ty:&quot; &quot;s,&quot; &quot;ems Sc&quot; ## [9] &quot;tters&quot; &quot;Pinker&quot; 1.4 Task Capitalise all word characters in the entire string1 data object using the appropriate stringr() function (note: do not store these changes in the data object). Code str_to_upper(string1) ## [1] &quot;MANY INFORMAL FALLACIES COME OUT OF A FEATURE OF HUMAN REASONING \\n WHICH LIES SO DEEP IN US THAT,&quot; ## [2] &quot;ACCORDING TO THE COGNITIVE SCIENTISTS DAN SPERBER AND HUGO MERCIER,&quot; ## [3] &quot;IT WAS A SELECTIVE PRESSURE THAT ALLOWED REASONING TO EVOLVE.&quot; ## [4] &quot;WE LIKE TO WIN ARGUMENTS.&quot; ## [5] &quot;IN AN IDEAL FORUM, THE WINNER OF AN ARGUMENT IS THE ONE WITH THE \\n MOST COGENT POSITION.&quot; 1.5 Task Apply the wrapper function to string3 to select only elements that contain the word reason. Code string3[str_detect(string3, &quot;reason&quot;)] ## [1] &quot;Many informal fallacies come out of a feature of human reasoning \\n which lies so deep in us that,&quot; ## [2] &quot;it was a selective pressure that allowed reasoning to evolve.&quot; 1.6 Task Calculate the mean of the number of times the following match is encountered in the string3 object: reasoning. Code mean(str_detect(string3, &quot;reasoning&quot;)) ## [1] 0.2 "],["subsetting-string-data.html", "2. Subsetting String Data 2.1 Task 2.2 Task 2.3 Task 2.4 Task 2.5 Task", " 2. Subsetting String Data 2.1 Task Find all elements in the string3 object that do NOT match the following pattern : Wh. (Hint: you need to set the default argument of the function to TRUE). Code str_subset(string3, &quot;Wh&quot;, negate = TRUE) ## [1] &quot;Many informal fallacies come out of a feature of human reasoning \\n which lies so deep in us that,&quot; ## [2] &quot;according to the cognitive scientists Dan Sperber and Hugo Mercier,&quot; ## [3] &quot;it was a selective pressure that allowed reasoning to evolve.&quot; ## [4] &quot;We like to win arguments.&quot; ## [5] &quot;In an ideal forum, the winner of an argument is the one with the \\n most cogent position.&quot; ## [6] &quot;Rationality:&quot; ## [7] &quot;- Steven Pinker&quot; 2.2 Task Extract all matches that correspond to punctuation symbols from string3. Code str_extract_all(string3, &quot;[:punct:]&quot;) ## [[1]] ## [1] &quot;,&quot; ## ## [[2]] ## [1] &quot;,&quot; ## ## [[3]] ## [1] &quot;.&quot; ## ## [[4]] ## [1] &quot;.&quot; ## ## [[5]] ## [1] &quot;,&quot; &quot;.&quot; ## ## [[6]] ## [1] &quot;:&quot; ## ## [[7]] ## [1] &quot;,&quot; ## ## [[8]] ## [1] &quot;,&quot; ## ## [[9]] ## character(0) ## ## [[10]] ## [1] &quot;-&quot; 2.3 Task Subset string3 such that one boundary of the letter e is a word character and one boundary is not a word character. Use the function that extracts all matches. Code str_extract_all(string3, &quot;e\\\\b&quot;) ## [[1]] ## [1] &quot;e&quot; &quot;e&quot; ## ## [[2]] ## [1] &quot;e&quot; &quot;e&quot; ## ## [[3]] ## [1] &quot;e&quot; &quot;e&quot; &quot;e&quot; ## ## [[4]] ## [1] &quot;e&quot; &quot;e&quot; ## ## [[5]] ## [1] &quot;e&quot; &quot;e&quot; &quot;e&quot; &quot;e&quot; ## ## [[6]] ## character(0) ## ## [[7]] ## character(0) ## ## [[8]] ## [1] &quot;e&quot; ## ## [[9]] ## character(0) ## ## [[10]] ## character(0) 2.4 Task Subset string3 such that the following pattern is matched at least once: ss. Use the function that extracts all matches. (Hint: you need to use a quantifier). Code str_extract_all(string3, &quot;ss+&quot;) ## [[1]] ## character(0) ## ## [[2]] ## character(0) ## ## [[3]] ## [1] &quot;ss&quot; ## ## [[4]] ## character(0) ## ## [[5]] ## character(0) ## ## [[6]] ## character(0) ## ## [[7]] ## character(0) ## ## [[8]] ## character(0) ## ## [[9]] ## character(0) ## ## [[10]] ## character(0) 2.5 Task Use the correct regular expression to extract all non-word character matches from string3. Render the output in vector form. Code unlist(str_extract_all(string3, &quot;\\\\W&quot;)) ## [1] &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot;\\n&quot; &quot; &quot; &quot; &quot; &quot; &quot; ## [16] &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; ## [31] &quot; &quot; &quot;,&quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot;,&quot; &quot; &quot; &quot; &quot; &quot; &quot; ## [46] &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot;.&quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot;.&quot; &quot; &quot; &quot; &quot; &quot; &quot; ## [61] &quot;,&quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot;\\n&quot; &quot; &quot; &quot; &quot; ## [76] &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot;.&quot; &quot;:&quot; ## [91] &quot; &quot; &quot; &quot; &quot;,&quot; &quot; &quot; &quot; &quot; &quot; &quot; &quot;,&quot; &quot; &quot; &quot; &quot; &quot;-&quot; &quot; &quot; &quot; &quot; "],["manipulating-string-data.html", "3. Manipulating String Data 3.1 Task 3.2 Task 3.3 Task 3.4 Task", " 3. Manipulating String Data 3.1 Task Replace the first match in every string of string2 object which correspond to “,” by ” ” (i.e. space). Code str_replace(string2, &quot;,&quot;, &quot; &quot;) ## [1] &quot;Rationality:&quot; &quot;What it is &quot; &quot;Why it seems Scarce &quot; ## [4] &quot;Why it Matters&quot; &quot;- Steven Pinker&quot; 3.2 Task Modify the capitalisation of the letters from string2 so that they all are lower case. Code str_to_lower(string2) ## [1] &quot;rationality:&quot; &quot;what it is,&quot; &quot;why it seems scarce,&quot; ## [4] &quot;why it matters&quot; &quot;- steven pinker&quot; 3.3 Task Split string2 object into four ‘pieces’ at the places where the elements contain spaces. Render the output as a matrix. Code str_split(string2, &quot; &quot;, n = 4, simplify = TRUE) ## [,1] [,2] [,3] [,4] ## [1,] &quot;Rationality:&quot; &quot;&quot; &quot;&quot; &quot;&quot; ## [2,] &quot;What&quot; &quot;it&quot; &quot;is,&quot; &quot;&quot; ## [3,] &quot;Why&quot; &quot;it&quot; &quot;seems&quot; &quot;Scarce,&quot; ## [4,] &quot;Why&quot; &quot;it&quot; &quot;Matters&quot; &quot;&quot; ## [5,] &quot;-&quot; &quot;Steven&quot; &quot;Pinker&quot; &quot;&quot; 3.4 Task Equalise the widths of the string1 elements using the width of the longest string. Use a dash pattern “-” to perform the adjustments. (Hint: provide the dash pattern in the pad argument of the function). Code str_pad(string1, pad = &quot;-&quot;, width = max(str_count(string1))) ## [1] &quot;-Many informal fallacies come out of a feature of human reasoning \\n which lies so deep in us that,&quot; ## [2] &quot;------------------------------------------according to the cognitive scientists Dan Sperber and Hugo Mercier,&quot; ## [3] &quot;------------------------------------------------it was a selective pressure that allowed reasoning to evolve.&quot; ## [4] &quot;------------------------------------------------------------------------------------We like to win arguments.&quot; ## [5] &quot;----------In an ideal forum, the winner of an argument is the one with the \\n most cogent position.&quot; "],["date-time-data.html", "4. Date-Time Data 4.1 Task 4.2 Task 4.3 Task 4.4 Task", " 4. Date-Time Data 4.1 Task Use the appropriate function to obtain today’s date, time and time zone. Code today() ## [1] &quot;2024-02-04&quot; 4.2 Task Display the following sequence of numbers as a date: 20210512. Code ymd(20210512) ## [1] &quot;2021-05-12&quot; 4.3 Task Round today’s date up to the nearest unit and change the time zone argument to GMT. Code ceiling_date(now(tzone = &quot;GMT&quot;), &quot;year&quot;) ## [1] &quot;2025-01-01 GMT&quot; 4.4 Task Calculate the interval between 9 February 1991 to 1 August 2022 in years. Code # Place the dates in two separate objects first feb91 &lt;- dmy(&quot;9-Feb-1991&quot;) aug22 &lt;- dmy(&quot;1-Aug-2022&quot;) # Then calculate the interval feb91 %--% aug22/years(1) ## [1] 31.47397 "],["overview-4.html", "Overview", " Overview Section 7: Programming with R Learning Outcomes: ADD ILOS. In this section, you will practice how to use the following functions: Function Description Package c() concatenate function base R WARNING 1: Before proceeding to the exercises, ensure that you create and work in a RStudio project and that you write and save your answers to the exercises in an R script. WARNING 2: To adequately develop your practical programming skills, it is essential that you attempt all exercises by typing out the code rather than simply copy-pasting the answers. You will require the tidyverse package for this practical. Code library(tidyverse) "],["basic-functions-and-loops.html", "1. Basic Functions and Loops 1.1 Task 1.2 Task 1.3 Task 1.4 Task 1.5 Task", " 1. Basic Functions and Loops 1.1 Task Write a function that calculates the sum between two values and name it sum_func. Use values 55 and 43 to test your function. Code sum_func &lt;- function(a, b){ c &lt;- a + b return(c) } 1.2 Task Use values 55 and 43 to test your function. Code sum_func(55,43) ## [1] 98 1.3 Task Write a function that calculates the average (mean) of two numbers and name it av_func. Hint: divide the sum of the values by the length of the vector. Code av_func &lt;- function(x){ avg &lt;- sum(x)/length(x) return(avg) } Then, use a loop to apply this function to the first 3 columns of the mtcars tidyverse built-in dataset and store it in a vector of type double called mean_mtcars. Print the results Code mean_mtcars &lt;- vector(&quot;double&quot;, length = 3) for(i in seq_along(mtcars[1:3])) { mean_mtcars[[i]] &lt;- av_func(mtcars[[i]]) } mean_mtcars ## [1] 20.09062 6.18750 230.72188 1.4 Task Write a loop that prints values to the power of 2 in a sequence from 1 to 6. Code for(i in 1:6) { print(i^2) } ## [1] 1 ## [1] 4 ## [1] 9 ## [1] 16 ## [1] 25 ## [1] 36 1.5 Task You have an object x which equals 205. Write a function with the following three conditions and store it in an object called example: if x is less than 10, then return “x is smaller than 10” if x greater than 10, then return “x is larger than 10” if x is equal to 10, then return “x is exactly 10” Print the contents of the object. Code x &lt;- 205 example &lt;- if (x &lt; 10) { &quot;x is smaller than 10&quot; } else if (x &gt; 10) { &quot;x is larger than 10&quot; } else if (x == 10) { &quot;x is exactly 10&quot; } print(example) ## [1] &quot;x is larger than 10&quot; "],["summary-statistics-and-plots.html", " 1 2. Summary Statistics and Plots 2.1 Task 2.2 Task 2.3 Task 2.4 Task 2.5 Task 2.6 Task 2.7 Task 2.8 Task 2.9 Task", " 1 2. Summary Statistics and Plots 2.1 Task Create a loop to calculate the standard deviation of each column of the mtcars dataset. Print the output Code output &lt;- vector(&quot;double&quot;, ncol(mtcars)) for (i in seq_along(mtcars)) { output[[i]] &lt;- sd(mtcars[[i]]) } output ## [1] 6.0269481 1.7859216 123.9386938 68.5628685 0.5346787 0.9784574 ## [7] 1.7869432 0.5040161 0.4989909 0.7378041 1.6152000 2.2 Task Use an appropriate base R functional to calculate the standard deviation of each column of the mtcars dataset and returns a vector. Code sapply(mtcars, sd) ## mpg cyl disp hp drat wt ## 6.0269481 1.7859216 123.9386938 68.5628685 0.5346787 0.9784574 ## qsec vs am gear carb ## 1.7869432 0.5040161 0.4989909 0.7378041 1.6152000 2.3 Task Use an appropriate tidyverse functional to calculate the standard deviation of each column of the mtcars dataset and returns a vector of type double. Code map_dbl(mtcars, sd) ## mpg cyl disp hp drat wt ## 6.0269481 1.7859216 123.9386938 68.5628685 0.5346787 0.9784574 ## qsec vs am gear carb ## 1.7869432 0.5040161 0.4989909 0.7378041 1.6152000 2.4 Task Using an appropriate base R functional, calculate the median age by religion in the gss_cat built-in dataset from tidyverse. Code tapply(gss_cat$age, gss_cat$relig, median, na.rm = T) ## No answer Don&#39;t know Inter-nondenominational ## 49.0 35.0 37.0 ## Native american Christian Orthodox-christian ## 37.0 38.0 51.0 ## Moslem/islam Other eastern Hinduism ## 37.0 46.5 33.0 ## Buddhism Other None ## 41.0 40.0 38.0 ## Jewish Catholic Protestant ## 53.0 45.0 49.0 ## Not applicable ## NA 2.5 Task Using an appropriate base R functional, calculate the mean tv hours by party ID in the gss_cat dataset. Code tapply(gss_cat$tvhours, gss_cat$partyid, mean, na.rm = T) ## No answer Don&#39;t know Other party Strong republican ## 3.222222 2.000000 2.794393 2.718750 ## Not str republican Ind,near rep Independent Ind,near dem ## 2.628068 2.765358 3.081235 2.804221 ## Not str democrat Strong democrat ## 3.044320 3.516198 2.6 Task Write a function that produces plots of variables rincome, relig, and tvhours for the gss_cat dataset. Specify these variables by name rather than by index. Code for(i in gss_cat[c(&quot;rincome&quot;, &quot;relig&quot;, &quot;tvhours&quot;)]){ p &lt;- ggplot(gss_cat, aes(x = i)) + geom_bar() print(p) } ## Warning: Removed 10146 rows containing non-finite values (`stat_count()`). 2.7 Task Create a function called make_center that takes as an input a vector and centers it (i.e. subtract the mean from x). Add a check for the input to be numeric or otherwise return an error message that states “x not numeric”. Code make_center &lt;- function(x) { if(!is.numeric(x)) { stop(&quot;x not numeric&quot;) } x - mean(x, na.rm = T) } 2.8 Task Apply the make_center() function you just created to center all variables of the mtcars dataset using a functional that returns a data frame as output. Code map_df(mtcars, make_center) ## # A tibble: 32 × 11 ## mpg cyl disp hp drat wt qsec vs am gear ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.909 -0.188 -70.7 -36.7 0.303 -0.597 -1.39 -0.438 0.594 0.312 ## 2 0.909 -0.188 -70.7 -36.7 0.303 -0.342 -0.829 -0.438 0.594 0.312 ## 3 2.71 -2.19 -123. -53.7 0.253 -0.897 0.761 0.562 0.594 0.312 ## 4 1.31 -0.188 27.3 -36.7 -0.517 -0.00225 1.59 0.562 -0.406 -0.688 ## 5 -1.39 1.81 129. 28.3 -0.447 0.223 -0.829 -0.438 -0.406 -0.688 ## 6 -1.99 -0.188 -5.72 -41.7 -0.837 0.243 2.37 0.562 -0.406 -0.688 ## 7 -5.79 1.81 129. 98.3 -0.387 0.353 -2.01 -0.438 -0.406 -0.688 ## 8 4.31 -2.19 -84.0 -84.7 0.0934 -0.0272 2.15 0.562 -0.406 0.312 ## 9 2.71 -2.19 -89.9 -51.7 0.323 -0.0673 5.05 0.562 -0.406 0.312 ## 10 -0.891 -0.188 -63.1 -23.7 0.323 0.223 0.451 0.562 -0.406 0.312 ## # ℹ 22 more rows ## # ℹ 1 more variable: carb &lt;dbl&gt; 2.9 Task Apply the make_center() function to center all variables of the mtcars dataset using a loop that stores the output as a list object; name this list object center_list and print the output. Code center_list &lt;- list(NULL) for (i in seq_along(mtcars)) { center_list[[i]] &lt;- make_center(mtcars[[i]]) } center_list ## [[1]] ## [1] 0.909375 0.909375 2.709375 1.309375 -1.390625 -1.990625 -5.790625 ## [8] 4.309375 2.709375 -0.890625 -2.290625 -3.690625 -2.790625 -4.890625 ## [15] -9.690625 -9.690625 -5.390625 12.309375 10.309375 13.809375 1.409375 ## [22] -4.590625 -4.890625 -6.790625 -0.890625 7.209375 5.909375 10.309375 ## [29] -4.290625 -0.390625 -5.090625 1.309375 ## ## [[2]] ## [1] -0.1875 -0.1875 -2.1875 -0.1875 1.8125 -0.1875 1.8125 -2.1875 -2.1875 ## [10] -0.1875 -0.1875 1.8125 1.8125 1.8125 1.8125 1.8125 1.8125 -2.1875 ## [19] -2.1875 -2.1875 -2.1875 1.8125 1.8125 1.8125 1.8125 -2.1875 -2.1875 ## [28] -2.1875 1.8125 -0.1875 1.8125 -2.1875 ## ## [[3]] ## [1] -70.721875 -70.721875 -122.721875 27.278125 129.278125 -5.721875 ## [7] 129.278125 -84.021875 -89.921875 -63.121875 -63.121875 45.078125 ## [13] 45.078125 45.078125 241.278125 229.278125 209.278125 -152.021875 ## [19] -155.021875 -159.621875 -110.621875 87.278125 73.278125 119.278125 ## [25] 169.278125 -151.721875 -110.421875 -135.621875 120.278125 -85.721875 ## [31] 70.278125 -109.721875 ## ## [[4]] ## [1] -36.6875 -36.6875 -53.6875 -36.6875 28.3125 -41.6875 98.3125 -84.6875 ## [9] -51.6875 -23.6875 -23.6875 33.3125 33.3125 33.3125 58.3125 68.3125 ## [17] 83.3125 -80.6875 -94.6875 -81.6875 -49.6875 3.3125 3.3125 98.3125 ## [25] 28.3125 -80.6875 -55.6875 -33.6875 117.3125 28.3125 188.3125 -37.6875 ## ## [[5]] ## [1] 0.3034375 0.3034375 0.2534375 -0.5165625 -0.4465625 -0.8365625 ## [7] -0.3865625 0.0934375 0.3234375 0.3234375 0.3234375 -0.5265625 ## [13] -0.5265625 -0.5265625 -0.6665625 -0.5965625 -0.3665625 0.4834375 ## [19] 1.3334375 0.6234375 0.1034375 -0.8365625 -0.4465625 0.1334375 ## [25] -0.5165625 0.4834375 0.8334375 0.1734375 0.6234375 0.0234375 ## [31] -0.0565625 0.5134375 ## ## [[6]] ## [1] -0.59725 -0.34225 -0.89725 -0.00225 0.22275 0.24275 0.35275 -0.02725 ## [9] -0.06725 0.22275 0.22275 0.85275 0.51275 0.56275 2.03275 2.20675 ## [17] 2.12775 -1.01725 -1.60225 -1.38225 -0.75225 0.30275 0.21775 0.62275 ## [25] 0.62775 -1.28225 -1.07725 -1.70425 -0.04725 -0.44725 0.35275 -0.43725 ## ## [[7]] ## [1] -1.38875 -0.82875 0.76125 1.59125 -0.82875 2.37125 -2.00875 2.15125 ## [9] 5.05125 0.45125 1.05125 -0.44875 -0.24875 0.15125 0.13125 -0.02875 ## [17] -0.42875 1.62125 0.67125 2.05125 2.16125 -0.97875 -0.54875 -2.43875 ## [25] -0.79875 1.05125 -1.14875 -0.94875 -3.34875 -2.34875 -3.24875 0.75125 ## ## [[8]] ## [1] -0.4375 -0.4375 0.5625 0.5625 -0.4375 0.5625 -0.4375 0.5625 0.5625 ## [10] 0.5625 0.5625 -0.4375 -0.4375 -0.4375 -0.4375 -0.4375 -0.4375 0.5625 ## [19] 0.5625 0.5625 0.5625 -0.4375 -0.4375 -0.4375 -0.4375 0.5625 -0.4375 ## [28] 0.5625 -0.4375 -0.4375 -0.4375 0.5625 ## ## [[9]] ## [1] 0.59375 0.59375 0.59375 -0.40625 -0.40625 -0.40625 -0.40625 -0.40625 ## [9] -0.40625 -0.40625 -0.40625 -0.40625 -0.40625 -0.40625 -0.40625 -0.40625 ## [17] -0.40625 0.59375 0.59375 0.59375 -0.40625 -0.40625 -0.40625 -0.40625 ## [25] -0.40625 0.59375 0.59375 0.59375 0.59375 0.59375 0.59375 0.59375 ## ## [[10]] ## [1] 0.3125 0.3125 0.3125 -0.6875 -0.6875 -0.6875 -0.6875 0.3125 0.3125 ## [10] 0.3125 0.3125 -0.6875 -0.6875 -0.6875 -0.6875 -0.6875 -0.6875 0.3125 ## [19] 0.3125 0.3125 -0.6875 -0.6875 -0.6875 -0.6875 -0.6875 0.3125 1.3125 ## [28] 1.3125 1.3125 1.3125 1.3125 0.3125 ## ## [[11]] ## [1] 1.1875 1.1875 -1.8125 -1.8125 -0.8125 -1.8125 1.1875 -0.8125 -0.8125 ## [10] 1.1875 1.1875 0.1875 0.1875 0.1875 1.1875 1.1875 1.1875 -1.8125 ## [19] -0.8125 -1.8125 -1.8125 -0.8125 -0.8125 1.1875 -0.8125 -1.8125 -0.8125 ## [28] -0.8125 1.1875 3.1875 5.1875 -0.8125 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
