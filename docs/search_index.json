[["index.html", "Data Science Modelling About", " Data Science Modelling Dr. Ioana Macoveciuc About WORK IN PROGRESS Welcome to SOST70033 Data Science Modelling! This notebook will host the materials for all quizzes and R practical tasks for this course unit. "],["how-to-use-this-notebook.html", "How to use this notebook", " How to use this notebook WORK IN PROGRESS Describe how to use each week and how to use the menu (maybe add a picture?) Mention that each link will open in a new window. 1: Before beginning, it is recommended that you create a RStudio project for this course and work through the exercises and tasks in each section using this project. 2: You should write and save your answers to the exercises and tasks in R scripts. You should have at least one R script for each course section. 3: To build a robust knowledge basis and adequately develop your practical programming skills, it is absolutely essential that you first attempt all tasks and exercises on your own before comparing your answers with those provided in this notebook. "],["overview.html", "Overview", " Overview Section 1: Introducing Statistical Programming with R and RStudio Learning Outcomes: Employ the basics of the R language to run simple lines of code; Import different types of data files; Export data in different formats. In this section, you will be introduced to the following functions: Function Description Package c() concatenate function base R class() class of object base R length() length of object base R View() viewing data objects spreadsheet-style base R read_spss() reading SPSS data files haven read_dta() reading Stata data files haven read.csv() reading .csv files base R readRDS() reading .RDS files base R load() loading .RData files base R save() saving multiple files (.Rdata format) base R saveRDS() saving single files (.RDS format) base R write.csv() save a file as .csv file base R Remember to continue working in the RStudio project you created for this course and typing your answers in separate R scripts. "],["basics-of-vector-structures.html", "1. Basics of Vector Structures 1.1 Exercise 1.2 Exercise 1.3 Exercise 1.4 Exercise 1.5 Exercise 1.6 Exercise 1.7 Exercise", " 1. Basics of Vector Structures 1.1 Exercise Create a vector object called num_vct that contains the following values: 70, 8, 50, 100. Print the contents. Code # Creating the vector. num_vct &lt;- c(70, 8, 50, 100) # Now printing the contents. num_vct ## [1] 70 8 50 100 1.2 Exercise Perform the following tasks with num_vct: Multiply the vector by 2. Divide the vector by 10. Subtract 5 from the vector. Add 8 to the vector. Code num_vct * 2 num_vct / 10 num_vct - 5 num_vct + 8 When performing operations on single vectors, you will note in the output that the operation is applied to each individual element within the vector. 1.3 Exercise Create a new numeric vector that contains the following values: 5, 7, 9, 10. Name it num_vct2 and print the contents. Code # Creating the vector. num_vct2 &lt;- c(5, 7, 9, 10) #Now printing the contents. num_vct2 ## [1] 5 7 9 10 1.4 Exercise Perform the following tasks with num_vct and num_vct2: Add num_vct2 to num_vct. Divide num_vct by num_vct2. Multiply num_vct by num_vct2. Subtract num_vct from num_vct2. Code num_vct2 + num_vct num_vct / num_vct2 num_vct * num_vct2 num_vct2 - num_vct When performing operations with two vectors, you will note in the output that the operation is being applied to the element of each vector in sequential order, according to the index of each element. Let’s take the following operation as an example: num_vct2 - num_vct. The elements of num_vct are: 70, 8, 50, 100 The elements of num_vct2 are: 5, 7, 9, 10 When subtracting num_vct from num_vct2, R performs the following operations according to the ‘position’ of each element in the vector. At index [1], we have 70 for num_vct and 5 for num_vct2 At index [2], we have 8 for num_vct and 7 for num_vct2 At index [3], we have 50 for num_vct and 9 for num_vct2 At index [4], we have 100 for num_vct and 10 for num_vct2 Therefore, R will perform the subtraction operation for each element located at a given index. The output for this operation will be: [1] -65 -1 -41 -90. 1.5 Exercise Create a character vector object that contains the following: I, love, programming, with, R. Name this vector char_vct and print the contents. Code char_vct &lt;- c(&quot;I&quot;, &quot;love&quot;, &quot;programming&quot;, &quot;with&quot;, &quot;R&quot;) char_vct ## [1] &quot;I&quot; &quot;love&quot; &quot;programming&quot; &quot;with&quot; &quot;R&quot; 1.6 Exercise Perform calculations on char_vct. Code char_vct * 2 ## Error in char_vct * 2: non-numeric argument to binary operator What results do you obtain after trying to perform mathematical operations on your character vector? Why ? Let’s say we try to multiply the character vector by 2. Note the error message in the console; none of the tasks can be applied to this vector because these are all arithmetic tasks which work only on numeric vectors. 1.7 Exercise Create a vector object that contains the following logical and numeric values: TRUE, 6, FALSE, 10, FALSE. Name it new_vct and print the contents. Code new_vct &lt;- c(TRUE, 6, FALSE, 10, FALSE) new_vct ## [1] 1 6 0 10 0 Does the output match the contents you entered when you created the vector? Why? No, it does not. Since vectors cannot contain different data types, R will force (i.e. coerce) all entered values to match, in an attempt to lose as little information as possible. In this case, the logical values are coerced to 1 and 0, corresponding to True and False respectively. This is one of the several reasons for why data cleaning is important before proceeding with data analysis; such coercion can have a significant impact on the accuracy of our data and implicitly, on your interpretation of the data. "],["importing-and-exporting-data.html", "2. Importing and Exporting Data 2.1 Exercise 2.2 Exercise 2.3 Exercise 2.4 Exercise 2.5 Exercise 2.6 Exercise 2.7 Exercise 2.8 Exercise", " 2. Importing and Exporting Data In this exercise, you will practice how to download, access, and import data from the UK Data Service in R. You will use data from the 2019 British Social Attitudes Survey, Poverty and Welfare: Open Access Teaching Dataset. British Social Attitudes Survey, 2019, Poverty and Welfare: Open Access Teaching Dataset Reference University of Manchester, Cathie Marsh Institute for Social Research (CMIST), UK Data Service. (2022). British Social Attitudes Survey, 2019, Poverty and Welfare: Open Access Teaching Dataset. [data collection]. NatCen Social Research, [original data producer(s)]. NatCen Social Research. SN: 8850, DOI: http://doi.org/10.5255/UKDA-SN-8850-1 Copyright Data download and access under a Creative Commons Attribution 4.0 International licence. Navigate to the British Social Attitudes Survey (2019) webpage on the UK Data Service website. Scroll down to the end of the webpage and download the dataset in both SPSS and STATA formats on your computer. To access the SPSS data file, unzip folder and open the folders in the following sequence: UKDA-8850-spss &gt; spss &gt; spss25 Follow the same approach for accessing the STATA file. Place the two files you downloaded in your root R project working directory in a subfolder called data. The recommended approach for a ‘clean’ working directory is to place all the data files you plan to use in a separate folder within your R project working directory. You should always use simple names that allow you easy access to the contents when you want to either explore the folder on your machine or specify the path to these folders in R. You should also keep both folders you downloaded (UKDA-8850-spss and UKDA-8850-stata) unzipped in your data folder. 2.1 Exercise Import the dataset in SPSS format; name this object bsas_spss. Code bsas_spss &lt;- read_spss(&quot;data/bsa2019_poverty_open.sav&quot;) ## Error in read_spss(&quot;data/bsa2019_poverty_open.sav&quot;): could not find function &quot;read_spss&quot; Did the import function work? Why? The read_spss() is a function from the haven package. If you loaded haven before you attempted to import the data file, then you should not have encountered any issue. However, if you did not, you would have been prompted by an error (as shown above). To load installed packages, use the library() function. Remember to always start your work in R by first loading all the packages that you require for your session. 2.2 Exercise Import the dataset in STATA format; name this object bsas_stata. Code bsas_stata &lt;- read_dta(&quot;data/bsa2019_poverty_open.dta&quot;) How many observations and variables do the bsas_spss and bsas_stata objects have? Are these identical for both objects? There are many different ways to find the number of observations and variables such as looking at the information in the Environment tab. Since both data files are identical, both objects contain an identical number of observations and variables. 2.3 Exercise Export bsas_spss and bsas_stata in .RData format. Name this file bsas_objects. Code save(bsas_spss, bsas_stata, file = &quot;data/bsas_objects.RData&quot;) Remember to keep your root working directory organised and save/export your data files in your data folder. 2.4 Exercise Now export bsas_spss in .RDS format and name it bsas_spss_file. Code saveRDS(bsas_spss, &quot;data/bsas_spss_file.RDS&quot;) 2.5 Exercise Finally, export bsas_stata as a .csv file and name it bsas_csv_file. Code write.csv(bsas_stata, &quot;data/bsas_csv_file.csv&quot;) 2.6 Exercise Import the .csv file you have created and name this object bsas_stata2. View the contents of the bsas_stata2 and bsas_stata objects. Code bsas_stata2 &lt;- read.csv(&quot;data/bsas_csv_file.csv&quot;) Are there any differences between the two data objects? If so, why? You can have a look at the two data objects using View(). The bsas_stata object imported with the haven package has accompanying metadata. When exporting data files with metadata as .csv files, this metadata is lost because this type of format does not support metadata in the same way that files such as SPSS and STATA do. Also, you may note that the bsas_stata2 has 27 rather than 26 variables; by default, the write.csv() function will automatically number each row in the data file and therefore, will produce an additional column. 2.7 Exercise Now import the .RDS you created earlier (bsas_spss_file) and name this object bsas_spss2. Code bsas_spss2 &lt;- readRDS(&quot;data/bsas_spss_file.RDS&quot;) 2.8 Exercise Finally, load the .Rdata file you created previously (bsas_objects). Code load(&quot;data/bsas_objects.RData&quot;) You will use some of these data objects in future practicals. Please make sure that you keep all of the data files from this section in your data folder. "],["bonus-task-data-on-github.html", "3. Bonus Task: Data on GitHub 3.1 Exercise 3.2 Exercise 3.3 Exercise 3.4 Exercise", " 3. Bonus Task: Data on GitHub Importing Data from Github Repositories Many different types of data can be imported in R using either base R functions or functions from packages. However, R is not limited to importing ‘hard copy’ files from your machine but also supports direct import of data files located on websites for example. GitHub is a cloud-based, online platform that allows programming users to openly share research projects, associated documentation, data files, and comments with other users and/or the public. You will learn more about GitHub later in the course. Explore the Johns Hopkins Whiting School of Engineering COVID-19 Github Repository. Open the csse_covid_19_data folder found at the beginning of the page. Then open the csse_covid_19_time_series folder. Click on time_series_covid19_confirmed_global.csv link. Click on the Raw button on the right hand side of the screen. The webpage will now show you a long series of numbers. This is the ‘data file’ that you need to import. Note that this file is a .csv file. The same base R function you have previously used will also work in this case. 3.1 Exercise To import the data file, create a new object called covid_johnshop. Within the base R .csv function, paste the full data file web link. Do not forget to enclose this link with quotation marks. Code covid_johnshop &lt;- read.csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&quot;) 3.2 Exercise View the contents of this object. Code View(covid_johnshop) 3.3 Exercise Find the class of the object. Code class(covid_johnshop) ## [1] &quot;data.frame&quot; 3.4 Exercise Export the data as a .csv file. Code write.csv(covid_johnshop, &quot;data/covid_johnshop.csv&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
